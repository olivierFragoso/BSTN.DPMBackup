<?xml version="1.0" encoding="UTF-8"?>
<Entities
 majorVersion="9"
 minorVersion="3"
 universal="password">
    <ThingShapes>
        <ThingShape
         aspect.isSystemObject="false"
         className=""
         description="Manages NOT event integration with CMS "
         documentationContent=""
         homeMashup=""
         name="BSTN.NOTEvent.Management_TS"
         projectName="BSTN.NOTEvent"
         tags="">
            <PropertyDefinitions></PropertyDefinitions>
            <ServiceDefinitions>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="CreateEvent">
                    <ResultType
                     aspect.dataShape="PTC.OperationKPI.AllEvents"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="workUnitName"
                         ordinal="4"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="CreateMaintenanceTicketInBAMM">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="EndNOTEvent">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="eventComments"
                         ordinal="5"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="eventUid"
                         ordinal="4"></FieldDefinition>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="NOTStartTime"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="INFOTABLE"
                         description=""
                         name="selectedReason"
                         ordinal="6"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="workUnitName"
                         ordinal="8"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetNOTDuration">
                    <ResultType
                     baseType="NUMBER"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="NOTStartTime"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetProductionAccountingData">
                    <ResultType
                     aspect.dataShape="PTC.OperationKPI.ProductionBlock"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="NOTStartTime"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="THINGNAME"
                         description=""
                         name="thingName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetThingNameFromCMTAsset">
                    <ResultType
                     baseType="THINGNAME"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="workUnitName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="StartNOTEvent">
                    <ResultType
                     baseType="DATETIME"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="UpdateChangeNOTInCache">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="UpdateEvent">
                    <ResultType
                     aspect.dataShape="PTC.OperationKPI.AllEvents"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="eventComments"
                         ordinal="6"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="eventUid"
                         ordinal="4"></FieldDefinition>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="NOTStartTime"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="INFOTABLE"
                         description=""
                         name="selectedReason"
                         ordinal="6"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="workUnitName"
                         ordinal="8"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="UpdateNOTReason">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="selectedReason"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="workUnitName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
            </ServiceDefinitions>
            <EventDefinitions></EventDefinitions>
            <ServiceMappings></ServiceMappings>
            <ServiceImplementations>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="CreateEvent">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // Initialize
                                    let impact = 1;
                                    // Get thing name from passed workUnitName
                                    let thingName = me.GetThingNameFromCMTAsset({
                                    	workUnitName: workUnitName /* STRING */
                                    });
                                    // Get new date to use as start time
                                    let NOTStartTime = new Date();
                                    // Get current production block at time of event
                                    let productionBlock = me.GetProductionAccountingData({
                                    	thingName: thingName /* THINGNAME */,
                                    	NOTStartTime: NOTStartTime /* DATETIME */
                                    });
                                    
                                    // result: INFOTABLE dataShape: "PTC.OperationKPI.AllEvents"
                                    let result = Things["PTC.ProductionDashboard.Manager"].CreateOrUpdateEvent({
                                    	comments: undefined /* STRING */,
                                    	eventCategory: undefined /* INFOTABLE {"dataShape":"PTC.ReasonCode.ReasonTreeGrid"} */,
                                    	eventUid: undefined /* STRING */,
                                    	impact: impact /* NUMBER [Required] */,
                                    	reallocateFromGoodCount: undefined /* BOOLEAN {"defaultValue":false} */,
                                    	thingName: thingName /* THINGNAME [Required] */,
                                    	productionBlock: productionBlock /* INFOTABLE [Required] {"dataShape":"PTC.ProductionDashboard.ProductionBlock"} */,
                                    	dataShapeName: undefined /* DATASHAPENAME */,
                                    	isAutomation: undefined /* BOOLEAN {"defaultValue":false} */,
                                    	reasonCodeElements: undefined /* INFOTABLE {"dataShape":"PTC.ReasonCode.ReasonTreeGrid"} */,
                                    	eventTime: NOTStartTime /* DATETIME */,
                                    	modelUid: undefined /* STRING */,
                                    	reasonModelUid: undefined /* STRING */,
                                    	sourceEventUid: undefined /* STRING */
                                    });
                                    
                                    //Update event to GABE
                                    me.UpdateNOTReason({
                                    	workUnitName: workUnitName /* STRING */,
                                    	selectedReason: "Unknown" /* STRING */
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="CreateMaintenanceTicketInBAMM">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code></code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="EndNOTEvent">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    me.UpdateEvent({
                                    	NOTStartTime: NOTStartTime /* DATETIME */,
                                    	eventUid: eventUid /* STRING */,
                                    	selectedReason: selectedReason /* INFOTABLE */,
                                    	eventComments: eventComments /* STRING */,
                                    	workUnitName: workUnitName /* STRING */
                                    });
                                    
                                    me.CreateEvent({
                                    	workUnitName: workUnitName /* STRING */
                                    });
                                    
                                    // result: INTEGER
                                    Things["BSTN.GABEInterface.Manager"].UpdateNOTReasonCodeForCMT({
                                    	WorkUnit: workUnitName /* STRING [Required] */,
                                    	Reason: selectedReason.reasonName /* STRING [Required] */
                                    });
                                    
                                    // result: INTEGER
                                    Things["BSTN.GABEInterface.Manager"].DeleteCompletedNOT({
                                    	WorkUnit: workUnitName /* STRING [Required] */
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetNOTDuration">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let currentTime = new Date();
                                    let startTime = NOTStartTime;
                                    let duration = (currentTime - startTime)/60000;
                                    result = Math.round(duration);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetProductionAccountingData">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // result: INFOTABLE dataShape: "PTC.ProductionDashboard.ProductionAccountingData"
                                    //let result = Things["PTC.ProductionDashboard.Manager"].GetProductionAccountingData({
                                    //	isShiftView: undefined /* BOOLEAN {"defaultValue":true} */,
                                    //	thingName: thingName /* THINGNAME [Required] */,
                                    //	localTimeZoneId: undefined /* STRING */
                                    //});
                                    
                                    // result: INFOTABLE dataShape: "PTC.OperationKPI.ProductionBlock"
                                    let result = Things[thingName].GetPTCProductionBlockInfos({
                                    	startDateTime: NOTStartTime, /* DATETIME */
                                        endDateTime: NOTStartTime /* DATETIME */
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetThingNameFromCMTAsset">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // Get Infotable of all Work Centers
                                    	// result: INFOTABLE dataShape: "RootEntityList"
                                    let workCenterList = ThingTemplates["PTC.MfgModel.DefaultWorkcenter_TT"].GetImplementingThingsWithData();
                                    // Query list of Work Centers for match
                                    	// Provide your filter using the format as described in the help topic "Query Parameter for Query Services"
                                    let query = {
                                     "filters": {
                                       "type": "LIKE",
                                       "fieldName": "name",
                                       "value": "*" + workUnitName
                                     }
                                    };
                                    
                                    let params = {
                                      t: workCenterList /* INFOTABLE */,
                                      query: query  /* QUERY */
                                    };
                                    
                                    let workCenterInfo = Resources["InfoTableFunctions"].Query(params);
                                    
                                    //Pull Work Center Name from the data row
                                    
                                    result = workCenterInfo.name;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="StartNOTEvent">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    result = new Date();
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="UpdateChangeNOTInCache">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code></code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="UpdateEvent">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let thingName = me.GetThingNameFromCMTAsset({
                                    	workUnitName: workUnitName /* STRING */
                                    });
                                    
                                    let impact = me.GetNOTDuration({
                                    	NOTStartTime: NOTStartTime /* DATETIME */
                                    });
                                    
                                    let productionBlock = me.GetProductionAccountingData({
                                    	thingName: thingName /* THINGNAME */,
                                    	NOTStartTime: NOTStartTime /* DATETIME */
                                    });
                                    
                                    let reasonModelUid = selectedReason.reasonModelUid;
                                    let eventCategory = selectedReason.reasonCategoryName;
                                    
                                    
                                    // result: INFOTABLE dataShape: "PTC.OperationKPI.AllEvents"
                                    let result = Things["PTC.ProductionDashboard.Manager"].CreateOrUpdateEvent({
                                    	comments: eventComments /* STRING */,
                                    	eventCategory: eventCategory /* INFOTABLE {"dataShape":"PTC.ReasonCode.ReasonTreeGrid"} */,
                                    	eventUid: eventUid /* STRING */,
                                    	impact: impact /* NUMBER [Required] */,
                                    	reallocateFromGoodCount: undefined /* BOOLEAN {"defaultValue":false} */,
                                    	thingName: thingName /* THINGNAME [Required] */,
                                    	productionBlock: productionBlock /* INFOTABLE [Required] {"dataShape":"PTC.ProductionDashboard.ProductionBlock"} */,
                                    	dataShapeName: undefined /* DATASHAPENAME */,
                                    	isAutomation: undefined /* BOOLEAN {"defaultValue":false} */,
                                    	reasonCodeElements: undefined /* INFOTABLE {"dataShape":"PTC.ReasonCode.ReasonTreeGrid"} */,
                                    	eventTime: NOTStartTime /* DATETIME */,
                                    	modelUid: undefined /* STRING */,
                                    	reasonModelUid: undefined /* STRING */,
                                    	sourceEventUid: undefined /* STRING */
                                    });
                                    
                                    me.UpdateNOTReason({
                                    	workUnitName: workUnitName /* STRING */,
                                    	selectedReason: selectedReason.reasonName /* STRING */
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="UpdateNOTReason">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // result: INTEGER
                                    let result = Things["BSTN.GABEInterface.Manager"].UpdateNOTReasonCodeForCMT({
                                    	WorkUnit: workUnitName /* STRING [Required] */,
                                    	Reason: selectedReason.reasonName /* STRING [Required] */
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
            </ServiceImplementations>
            <Subscriptions></Subscriptions>
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <InstanceRunTimePermissions></InstanceRunTimePermissions>
        </ThingShape>
    </ThingShapes>
</Entities>
