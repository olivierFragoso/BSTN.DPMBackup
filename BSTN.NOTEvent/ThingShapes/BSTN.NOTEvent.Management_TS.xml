<?xml version="1.0" encoding="UTF-8"?>
<Entities
 majorVersion="9"
 minorVersion="3"
 universal="password">
    <ThingShapes>
        <ThingShape
         aspect.isSystemObject="false"
         className=""
         description="Manages NOT event integration with CMS "
         documentationContent=""
         homeMashup=""
         name="BSTN.NOTEvent.Management_TS"
         projectName="BSTN.NOTEvent"
         tags="">
            <PropertyDefinitions></PropertyDefinitions>
            <ServiceDefinitions>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="CreateChangeoverEvents">
                    <ResultType
                     aspect.dataShape="PTC.OperationKPI.AllEvents"
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="workUnitName"
                         ordinal="8"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="CreateMaintenanceTicketInBAMM">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="EndNOTEvent">
                    <ResultType
                     aspect.dataShape="PTC.OperationKPI.AllEvents"
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="eventComments"
                         ordinal="5"></FieldDefinition>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="NOTStartTime"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.dataShape="PTC.ReasonCode.ReasonTreeGrid"
                         baseType="INFOTABLE"
                         description=""
                         name="selectedReason"
                         ordinal="6"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="workUnitName"
                         ordinal="8"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="example">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetModelUidFromCMTAsset">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="workUnitName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetNOTCategory">
                    <ResultType
                     aspect.dataShape="PTC.ReasonCode.ReasonTreeGrid"
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="PTC.ReasonCode.ReasonTreeGrid"
                         baseType="INFOTABLE"
                         description=""
                         name="NOTReason"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetNOTDuration">
                    <ResultType
                     baseType="INTEGER"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="NOTStartTime"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetNOTReason">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="PTC.ReasonCode.ReasonTreeGrid"
                         baseType="INFOTABLE"
                         description=""
                         name="NOTReason"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetProductionBlockAtNOTStart">
                    <ResultType
                     aspect.dataShape="PTC.OperationKPI.ProductionBlock"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="NOTStartTime"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="THINGNAME"
                         description=""
                         name="thingName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetWorkCenterThingNameFromCMTAsset">
                    <ResultType
                     aspect.dataShape="RootEntityList"
                     baseType="THINGNAME"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="workUnitName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetWorkUnitThingNameFromCMTAsset">
                    <ResultType
                     baseType="THINGNAME"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="workUnitName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="StartNOTEvent">
                    <ResultType
                     baseType="DATETIME"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="UpdateChangeNOTInCache">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="UpdateNOTReason">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="PTC.ReasonCode.ReasonTreeGrid"
                         baseType="INFOTABLE"
                         description=""
                         name="selectedReason"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="workUnitName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
            </ServiceDefinitions>
            <EventDefinitions></EventDefinitions>
            <ServiceMappings></ServiceMappings>
            <ServiceImplementations>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="CreateChangeoverEvents">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let workUnit = me.GetWorkUnitThingNameFromCMTAsset({
                                    	workUnitName: workUnitName /* STRING */
                                    });
                                    
                                    cached = Things[workUnit].cachedChangeover;
                                    
                                    let modelUid = me.GetModelUidFromCMTAsset({
                                    	workUnitName: workUnitName /* STRING */
                                    });
                                    
                                    // Get Production block for beginning of NOT Event
                                    let productionBlock = me.GetProductionBlockAtNOTStart({
                                    	thingName: workUnit /* THINGNAME */,
                                    	NOTStartTime: cached.NOTStartTime /* DATETIME */
                                    });
                                    
                                    // initialize change reason
                                    let stdChangeReason = cached.changeType + " Change Criteria";
                                    
                                    // check if Change Delay is present
                                    let isChangeDelay = false;
                                    if(cached.endStdChangeTime < cached.NOTEndTime){
                                        isChangeDelay = true;
                                    }
                                    
                                    // calculate std change impact
                                    let stdChangeImpact = 1;
                                    if (isChangeDelay){
                                        stdChangeImpact = Math.trunc((cached.endStdChangeTime - cached.NOTStartTime)/60000);
                                    } else {
                                        stdChangeImpact = Math.trunc((cached.NOTEndTime - cached.NOTStartTime)/60000);
                                    }
                                    
                                    // Get reasonCodeElements for std change
                                    let stdChangeReasonCodeElements = getReasonCodeElements("7", modelUid, stdChangeReason);
                                    
                                    // result: INFOTABLE dataShape: "PTC.OperationKPI.AllEvents"
                                    let result = Things["PTC.ProductionDashboard.Manager"].CreateOrUpdateEvent({
                                    	comments: cached.eventComments /* STRING */,
                                    	eventCategory: undefined /* INFOTABLE {"dataShape":"PTC.ReasonCode.ReasonTreeGrid"} */,
                                    	eventUid: undefined /* STRING */,
                                    	impact: stdChangeImpact /* NUMBER [Required] */,
                                    	reallocateFromGoodCount: undefined /* BOOLEAN {"defaultValue":false} */,
                                    	thingName: workUnit /* THINGNAME [Required] */,
                                    	productionBlock: productionBlock /* INFOTABLE [Required] {"dataShape":"PTC.ProductionDashboard.ProductionBlock"} */,
                                    	dataShapeName: "PTC.OperationKPI.LossEvent" /* DATASHAPENAME */,
                                    	isAutomation: false /* BOOLEAN {"defaultValue":false} */,
                                    	reasonCodeElements: stdChangeReasonCodeElements /* INFOTABLE {"dataShape":"PTC.ReasonCode.ReasonTreeGrid"} */,
                                    	eventTime: cached.NOTStartTime /* DATETIME */,
                                    	modelUid: modelUid /* STRING */,
                                    	reasonModelUid: undefined /* STRING */,
                                    	sourceEventUid: undefined /* STRING */
                                    });
                                    
                                    // If change delay present run again
                                    if(isChangeDelay){
                                        // Get Change Delay Impact
                                        let changeDelayImpact = Math.trunc((cached.NOTEndTime - cached.endStdChangeTime)/60000);
                                        
                                        // Get reasonCodeElements for std change
                                        let changeDelayReason = cached.changeType + " Change Delay";
                                    	let changeDelayReasonCodeElements = getReasonCodeElements("7", modelUid, changeDelayReason); 
                                        // result: INFOTABLE dataShape: "PTC.OperationKPI.AllEvents"
                                        let result = Things["PTC.ProductionDashboard.Manager"].CreateOrUpdateEvent({
                                        	comments: cached.eventComments /* STRING */,
                                        	eventCategory: undefined /* INFOTABLE {"dataShape":"PTC.ReasonCode.ReasonTreeGrid"} */,
                                        	eventUid: undefined /* STRING */,
                                        	impact: changeDelayImpact /* NUMBER [Required] */,
                                        	reallocateFromGoodCount: undefined /* BOOLEAN {"defaultValue":false} */,
                                        	thingName: workUnit /* THINGNAME [Required] */,
                                        	productionBlock: productionBlock /* INFOTABLE [Required] {"dataShape":"PTC.ProductionDashboard.ProductionBlock"} */,
                                        	dataShapeName: "PTC.OperationKPI.LossEvent" /* DATASHAPENAME */,
                                        	isAutomation: false /* BOOLEAN {"defaultValue":false} */,
                                        	reasonCodeElements: changeDelayReasonCodeElements /* INFOTABLE {"dataShape":"PTC.ReasonCode.ReasonTreeGrid"} */,
                                        	eventTime: cached.endStdChangeTime /* DATETIME */,
                                        	modelUid: modelUid /* STRING */,
                                        	reasonModelUid: undefined /* STRING */,
                                        	sourceEventUid: undefined /* STRING */
                                        });
                                    }
                                    
                                    
                                    
                                    //functions
                                    function getReasonCodeElements(reasonCategoryUid, modelUid, reasonName){
                                        let reasonManager = "PTC.ReasonCodeImpl.Manager";
                                        let reasonTree = Things[reasonManager].GetReasonTreeGrid({
                                            includeReasonTypeNames: undefined /* STRING */,
                                            onlyReasonCategories: false /* BOOLEAN {"defaultValue":false} */,
                                            onlyEnabledReason: true /* BOOLEAN {"defaultValue":false} */,
                                            filterReasonCategoryUid: reasonCategoryUid /* STRING */,
                                            modelUid: modelUid /* STRING */,
                                            materialMasterUid: undefined /* STRING */
                                        });
                                        return Resources["InfoTableFunctions"].Query({
                                            t: reasonTree /* INFOTABLE */,
                                            query: {
                                              "filters":{
                                              "type": "LIKE",
                                              "fieldName": "reasonName",
                                              "value": reasonName
                                              }
                                            } 
                                        });
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="CreateMaintenanceTicketInBAMM">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code></code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="EndNOTEvent">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let impact = me.GetNOTDuration({
                                    	NOTStartTime: NOTStartTime /* DATETIME */
                                    });
                                    
                                    let workUnit = me.GetWorkUnitThingNameFromCMTAsset({
                                    	workUnitName: workUnitName /* STRING */
                                    });
                                    
                                    let modelUid = me.GetModelUidFromCMTAsset({
                                    	workUnitName: workUnitName /* STRING */
                                    });
                                    
                                    // Get Production block for beginning of NOT Event
                                    let productionBlock = me.GetProductionBlockAtNOTStart({
                                    	thingName: workUnit /* THINGNAME */,
                                    	NOTStartTime: NOTStartTime /* DATETIME */
                                    });
                                    
                                    // Get reasonCodeElements
                                    let reasonCodeElements = getReasonCodeElements(selectedReason.reasonCategoryUid, modelUid, selectedReason.reasonName);
                                    
                                    // Check if Changeover NOT
                                    if(selectedReason.reasonCategoryName == "Changeover"){
                                        //Send to Changeover cache    
                                        let NOTEndTime = new Date();
                                        // BSTN.NOTEvent.ChangeoverCache_DS entry object
                                        let newEntry = {
                                            workUnitName: workUnitName, // STRING
                                            NOTStartTime: NOTStartTime, // DATETIME
                                            NOTEndTime: NOTEndTime, // DATETIME
                                            eventComments: eventComments // STRING
                                        };
                                        
                                        Things[workUnit].cachedChangeover.RemoveAllRows();
                                        Things[workUnit].cachedChangeover.AddRow(newEntry);    
                                    } else {
                                        // result: INFOTABLE dataShape: "PTC.OperationKPI.AllEvents"
                                        let result = Things["PTC.ProductionDashboard.Manager"].CreateOrUpdateEvent({
                                        	comments: eventComments /* STRING */,
                                        	eventCategory: undefined /* INFOTABLE {"dataShape":"PTC.ReasonCode.ReasonTreeGrid"} */,
                                        	eventUid: undefined /* STRING */,
                                        	impact: impact /* NUMBER [Required] */,
                                        	reallocateFromGoodCount: undefined /* BOOLEAN {"defaultValue":false} */,
                                        	thingName: workUnit /* THINGNAME [Required] */,
                                        	productionBlock: productionBlock /* INFOTABLE [Required] {"dataShape":"PTC.ProductionDashboard.ProductionBlock"} */,
                                        	dataShapeName: "PTC.OperationKPI.LossEvent" /* DATASHAPENAME */,
                                        	isAutomation: false /* BOOLEAN {"defaultValue":false} */,
                                        	reasonCodeElements: reasonCodeElements /* INFOTABLE {"dataShape":"PTC.ReasonCode.ReasonTreeGrid"} */,
                                        	eventTime: NOTStartTime /* DATETIME */,
                                        	modelUid: modelUid /* STRING */,
                                        	reasonModelUid: undefined /* STRING */,
                                        	sourceEventUid: undefined /* STRING */
                                        });  
                                    }
                                    
                                    // result: INTEGER
                                    Things["BSTN.GABEInterface.Manager"].DeleteCompletedNOT({
                                    	WorkUnit: workUnitName /* STRING [Required] */
                                    });
                                    
                                    
                                    
                                    //functions
                                    function getReasonCodeElements(reasonCategoryUid, modelUid, reasonName){
                                        let reasonManager = "PTC.ReasonCodeImpl.Manager";
                                        let reasonTree = Things[reasonManager].GetReasonTreeGrid({
                                            includeReasonTypeNames: undefined /* STRING */,
                                            onlyReasonCategories: false /* BOOLEAN {"defaultValue":false} */,
                                            onlyEnabledReason: true /* BOOLEAN {"defaultValue":false} */,
                                            filterReasonCategoryUid: reasonCategoryUid /* STRING */,
                                            modelUid: modelUid /* STRING */,
                                            materialMasterUid: undefined /* STRING */
                                        });
                                        return Resources["InfoTableFunctions"].Query({
                                            t: reasonTree /* INFOTABLE */,
                                            query: {
                                              "filters":{
                                              "type": "LIKE",
                                              "fieldName": "reasonName",
                                              "value": reasonName
                                              }
                                            } 
                                        });
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="example">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    //Get workUnitThingname from job order
                                    
                                    let cached = Things[workUnitThingname].cachedChangeover;
                                    
                                    // do your calculations here
                                    	// use this to get your variables you need:
                                    	//let NOTStartTime = cached[0].NOTStartTime;
                                    
                                    
                                    // insert calculations here
                                    	// use this to write back to infotable
                                    	//cached[0].endSTDChangeTime = endStdChangeTime;
                                    
                                    
                                    // call service to create events in DPM (GABE work unit name)
                                    	Things["BSTN.NOTEvent.Manager"].CreateChangeoverEvents(workUnitName);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetModelUidFromCMTAsset">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // Get Infotable of all Work Centers
                                    	// result: INFOTABLE dataShape: "RootEntityList"
                                    let workUnitList = ThingTemplates["PTC.MfgModel.DefaultWorkunit_TT"].GetImplementingThingsWithData();
                                    // Query list of Work Centers for match
                                    	// Provide your filter using the format as described in the help topic "Query Parameter for Query Services"
                                    let query = {
                                     "filters": {
                                       "type": "LIKE",
                                       "fieldName": "name",
                                       "value": "*" + workUnitName
                                     }
                                    };
                                    
                                    let params = {
                                      t: workUnitList /* INFOTABLE */,
                                      query: query  /* QUERY */
                                    };
                                    
                                    let workUnitInfo = Resources["InfoTableFunctions"].Query(params);
                                    
                                    //Pull Work Center Name from the data row
                                    
                                    let result = workUnitInfo.PTCModelUid;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetNOTCategory">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = NOTReason.reasonCategoryName;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetNOTDuration">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let currentTime = new Date();
                                    let startTime = NOTStartTime;
                                    let duration = (currentTime - startTime)/60000;
                                    let result = Math.trunc(duration);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetNOTReason">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = NOTReason.reasonName;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetProductionBlockAtNOTStart">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // result: INFOTABLE dataShape: "PTC.ProductionDashboard.ProductionAccountingData"
                                    //let result = Things["PTC.ProductionDashboard.Manager"].GetProductionAccountingData({
                                    //	isShiftView: undefined /* BOOLEAN {"defaultValue":true} */,
                                    //	thingName: thingName /* THINGNAME [Required] */,
                                    //	localTimeZoneId: undefined /* STRING */
                                    //});
                                    
                                    // result: INFOTABLE dataShape: "PTC.OperationKPI.ProductionBlock"
                                    let result = Things[thingName].GetPTCProductionBlockInfos({
                                    	startDateTime: NOTStartTime, /* DATETIME */
                                        endDateTime: NOTStartTime /* DATETIME */
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetWorkCenterThingNameFromCMTAsset">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // Get Infotable of all Work Centers
                                    	// result: INFOTABLE dataShape: "RootEntityList"
                                    let workCenterList = ThingTemplates["PTC.MfgModel.DefaultWorkcenter_TT"].GetImplementingThingsWithData();
                                    // Query list of Work Centers for match
                                    	// Provide your filter using the format as described in the help topic "Query Parameter for Query Services"
                                    let query = {
                                     "filters": {
                                       "type": "LIKE",
                                       "fieldName": "name",
                                       "value": "*" + workUnitName
                                     }
                                    };
                                    
                                    let params = {
                                      t: workCenterList /* INFOTABLE */,
                                      query: query  /* QUERY */
                                    };
                                    
                                    let workCenterInfo = Resources["InfoTableFunctions"].Query(params);
                                    
                                    //Pull Work Center Name from the data row
                                    
                                    let result = workCenterInfo.name;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetWorkUnitThingNameFromCMTAsset">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // Get Infotable of all Work Centers
                                    	// result: INFOTABLE dataShape: "RootEntityList"
                                    let workUnitList = ThingTemplates["PTC.MfgModel.DefaultWorkunit_TT"].GetImplementingThingsWithData();
                                    // Query list of Work Centers for match
                                    	// Provide your filter using the format as described in the help topic "Query Parameter for Query Services"
                                    let query = {
                                     "filters": {
                                       "type": "LIKE",
                                       "fieldName": "name",
                                       "value": "*" + workUnitName
                                     }
                                    };
                                    
                                    let params = {
                                      t: workUnitList /* INFOTABLE */,
                                      query: query  /* QUERY */
                                    };
                                    
                                    let workUnitInfo = Resources["InfoTableFunctions"].Query(params);
                                    
                                    //Pull Work Center Name from the data row
                                    
                                    let result = workUnitInfo.name;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="StartNOTEvent">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    result = new Date();
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="UpdateChangeNOTInCache">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code></code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="UpdateNOTReason">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // result: INTEGER
                                    let result = Things["BSTN.GABEInterface.Manager"].UpdateNOTReasonCodeForCMT({
                                    	WorkUnit: workUnitName /* STRING [Required] */,
                                    	Reason: selectedReason.reasonName /* STRING [Required] */
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
            </ServiceImplementations>
            <Subscriptions></Subscriptions>
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <InstanceRunTimePermissions></InstanceRunTimePermissions>
        </ThingShape>
    </ThingShapes>
</Entities>
