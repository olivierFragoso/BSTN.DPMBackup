<?xml version="1.0" encoding="UTF-8"?>
<Entities
 majorVersion="9"
 minorVersion="3"
 universal="password">
    <ThingShapes>
        <ThingShape
         aspect.isEditableExtensionObject="false"
         aspect.isExtension="true"
         className=""
         description="Base Component Management Thing Shape. Contains all services that provide base component functionalities"
         documentationContent=""
         homeMashup=""
         name="PTC.Base.Management_TS"
         projectName="PTC.Base"
         tags="">
            <PropertyDefinitions></PropertyDefinitions>
            <ServiceDefinitions>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Adds a User Group to User Group"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="AddGroupToGroup">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the User Group that gets added to the other group"
                         name="childGroup"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the User Group to add other group into"
                         name="parentGroup"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Adds User Group to Organization Unit"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="AddGroupToOrgUnit">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the Organization to add group to"
                         name="orgName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the Organization Unit to add group to"
                         name="orgUnitName"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the User Group to Add"
                         name="userGroupName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Creates a new Building Block."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="AddNewComponent">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="Description of the building block"
                         name="description"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Common name or display name of the Building Block"
                         name="displayName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Project Name of the component. will also be the prefix that is appended to all entities generated."
                         name="namespace"
                         ordinal="6"></FieldDefinition>
                        <FieldDefinition
                         baseType="IMAGELINK"
                         description="Building Block thumbnail (optional)"
                         name="thumbnail"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Type of Component (BuildingBlock or Solution)"
                         name="type"
                         ordinal="4"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Version of the component."
                         name="version"
                         ordinal="5"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Creates a new Implementation Building Block."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="AddNewImplComponent">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="Project Name of the component that this implementation building block implements"
                         name="abstractComponentNamespace"
                         ordinal="7"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Description of the building block"
                         name="description"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Common name or display name of the Building Block"
                         name="displayName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Project Name of the component. will also be the prefix that is appended to all entities generated."
                         name="namespace"
                         ordinal="6"></FieldDefinition>
                        <FieldDefinition
                         baseType="IMAGELINK"
                         description="Building Block thumbnail (optional)"
                         name="thumbnail"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Type of Component (BuildingBlock or Solution)"
                         name="type"
                         ordinal="4"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Version of the component."
                         name="version"
                         ordinal="5"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Creates  a new user and adds it to the Component Project."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="AddNewUserToComponent">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.thingShape="PTC.Base.CommonManagement_TS"
                         baseType="THINGNAME"
                         description="Name of the default manager of the component to add the user to"
                         name="componentManager"
                         ordinal="5"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="First name of the new User"
                         name="firstName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Last Name of the new user"
                         name="lastName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Optional password for the new user."
                         name="preferredPassword"
                         ordinal="4"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="User Name of the new user."
                         name="userName"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Adds a user to a passed in user group"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="AddNewUserToUserGroup">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="Group name of the group to add the user to"
                         name="groupName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="User name of the user to add to the group"
                         name="userName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Creates a new organization and adds it to the passed in component."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="AddOrganizationToComponent">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.thingShape="PTC.Base.CommonManagement_TS"
                         baseType="THINGNAME"
                         description="Default manager name for the component that the organization gets added to."
                         name="componentManager"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Organization name of the organization to create"
                         name="orgName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the root Org unit."
                         name="preferredOrgName"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Adds an org unit to the passed in organization"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="AddOrgUnitToOrg">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the organization to create the org unit in"
                         name="orgName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name an Org Unit to add to the organization"
                         name="orgUnitName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the parent org unit to add the new org unit under"
                         name="parentOrgUnitName"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Creates a new user group and adds it to the passed in component."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="AddUserGroupToComponent">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.thingShape="PTC.Base.CommonManagement_TS"
                         baseType="THINGNAME"
                         description="Name of the component manager of the component to add the user group to"
                         name="componentManager"
                         ordinal="4"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Description of the new User Group"
                         name="userGroupDescription"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the user group to add to the component"
                         name="userGroupName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Fetch the processSolution result based on action (Deploy,Upgrade,Migrate)."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="CollectSolutionStatus">
                    <ResultType
                     aspect.dataShape="PTC.Base.ComponentConfigStatus"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description="Type of action: Deploy, Upgrade, Migrate."
                         name="action"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Warning: Deletes all entities contained within a project (component). Note: Does not delete datashapes due to potential recursive dependencies. These will have to be deleted manually"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="DeleteComponent">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the project entity to delete (will delete all entities in the project as well)"
                         name="namespace"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Deletes User group and removes it from component"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="DeleteComponentUserGroup">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the user group to delete"
                         name="userGroupName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Deletes a user and removes entity from component"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="DeleteComponentUsers">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the user to delete"
                         name="userName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Removes an Org Unit from the passed in Organization"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="DeleteOrgUnitFromOrganization">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the Organization to remove the org unit from"
                         name="orgName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the Org Unit to remove"
                         name="orgUnitName"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="INTERNAL SERVICE: Used to fix the Default Group dependency hierarchy"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="FixDefaultUserGroupHierarchy">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the Project to start fixing the group hierarchy"
                         name="projectName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Returns all dependent components for a passed in project"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetAllDependentComponentsForComponent">
                    <ResultType
                     aspect.dataShape="GenericStringList"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the project to get dependencies from"
                         name="projectName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Returns all of the mashups that a User Group has visibility to"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetAllMashupsForUserGroup">
                    <ResultType
                     aspect.dataShape="EntityReference"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the user group to check visibility with"
                         name="userGroupName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="INTERNAL SERVICE: Service is intended to be invoked via REST. Returns a list of mashups that the current user can see"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetAllMashupsForUserREST">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Returns a list of Things that a user group has visibility to"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetAllThingsForUserGroup">
                    <ResultType
                     aspect.dataShape="EntityReference"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the user group to check visibility on Things"
                         name="userGroupName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="INTERNAL SERVICE: Service is intended to be invoked via REST. Returns a list of things that the current user can see"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetAllThingsForUserREST">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category="Deployment"
                 description="Recursively calls function to traverse the components installed and returns an array ordered by how they should be deployed"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetComponentDeploymentOrder">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Returns the list of installed components, and their respective deployment status."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetComponentDeploymentStatus">
                    <ResultType
                     aspect.dataShape="PTC.Base.ComponentConfigStatus"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Gets a list of Building Blocks that are installed in the system."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetComponentList">
                    <ResultType
                     aspect.dataShape="PTC.Base.ComponentDescription"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Returns the organizations contained in a component."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetComponentOrganizations">
                    <ResultType
                     aspect.dataShape="EntityList"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.thingShape="PTC.Base.CommonManagement_TS"
                         baseType="THINGNAME"
                         description="Default Manager name for the component that contains the Organizations"
                         name="componentManager"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Returns a list of User Groups contained in the component."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetComponentUserGroups">
                    <ResultType
                     aspect.dataShape="EntityList"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.thingShape="PTC.Base.CommonManagement_TS"
                         baseType="THINGNAME"
                         description="Name of the default manager of the component that contains the User Groups to return"
                         name="componentManager"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Returns users that are contained in the component."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetComponentUsers">
                    <ResultType
                     aspect.dataShape="PTC.Base.UserProperties"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.thingShape="PTC.Base.CommonManagement_TS"
                         baseType="THINGNAME"
                         description="Default Manager name for the component that contains the Users to return"
                         name="componentManager"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Get configuration parameters for action Deploy/Upgrade/Migrate."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetConfigurationParameters">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description="Deploy/ Upgrade/ Migrate"
                         name="action"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Returns all groups in the passed in org unit"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetGroupsInOrgUnit">
                    <ResultType
                     aspect.dataShape="EntityReferenceWithDescription"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="Organization Name that the org unit resides in"
                         name="orgName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the org unit to get the groups out of"
                         name="orgUnit"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Returns the structure of Org units in the passed in organization"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetOrganizationUnitStructure">
                    <ResultType
                     aspect.dataShape="OrganizationConnection"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the organization to get the org unit structure"
                         name="organization"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Returns the service invoke permissions on a Thing for a particular user group"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetServiceInvokePermissionsForUserGroupAndThing">
                    <ResultType
                     aspect.dataShape="RunTimePermissions"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the thing to get permissions on"
                         name="selectedThingName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the user group to check permissions for"
                         name="userGroupName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category="Deployment"
                 description="Returns a list of configuration parameters for all building blocks as a JSON structure"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetSolutionDeploymentConfigurationParameters">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category="Upgrade"
                 description="Returns a list of migrate configuration parameters for all building blocks as a JSON structure"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetSolutionMigrateConfigurationParameters">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Returns the solution that a particular mashup belongs to"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetSolutionNameForMashup">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the mashup to get solution name from"
                         name="mashupName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Returns a list of solutions that are installed on the platform"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetSolutions">
                    <ResultType
                     aspect.dataShape="PTC.Base.SolutionPickerData"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Returns the list of installed components, and their respective upgrade and migrate status."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetSolutionUpgradeAndMigrateStatus">
                    <ResultType
                     aspect.dataShape="PTC.Base.ComponentConfigStatus"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description="Json configuration."
                         name="config"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category="Upgrade"
                 description="Returns a list of upgrade configuration parameters for all building blocks as a JSON structure"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetSolutionUpgradeConfigurationParameters">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="***DEPRECATED DPM 1.2.0*** This service will be deleted in a future release. Populates data for the User Profile menu on the master mashup."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetUserProfileMenu">
                    <ResultType
                     aspect.dataShape="MenuEntry"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Returns a list of users that are in the passed in user group"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetUsersInGroup">
                    <ResultType
                     aspect.dataShape="PTC.Base.UserManagement"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the user group that contains the list of users to return"
                         name="groupName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category="Deployment"
                 description="Service that can deploy the building block solution stack"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="InitializeSolution">
                    <ResultType
                     aspect.dataShape="PTC.Base.ComponentConfigStatus"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="JSON"
                         description="JSON Configuration that will be used to configure the component stack"
                         name="deploymentConfig"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Migrate DPM solution to latest."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="MigrateSolution">
                    <ResultType
                     aspect.dataShape="PTC.Base.ComponentConfigStatus"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="false"
                         baseType="JSON"
                         description="JSON Configuration that will be used to configure the component stack"
                         name="config"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Executes the PreMigrateComponent service for each building block in the solution."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="PreMigrateSolution">
                    <ResultType
                     aspect.dataShape="PTC.Base.ComponentConfigStatus"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="JSON"
                         description="Optional JSON config."
                         name="config"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Executes the PreUpgradeComponent service for each building block in the solution."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="PreUpgradeSolution">
                    <ResultType
                     aspect.dataShape="PTC.Base.ComponentConfigStatus"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="JSON"
                         description="Optional JSON config."
                         name="config"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Service to configure components dynamically .based on deployOrder."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="ProcessSolution">
                    <ResultType
                     aspect.dataShape="PTC.Base.ComponentConfigStatus"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description="Name of  action, Deploy/Upgrade/Migrate."
                         name="action"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description="JSON Configuration that will be used to configure the component stack."
                         name="config"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="deletes an organization, and removes it from the component."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="RemoveOrganizationFromComponent">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the Organization to remove"
                         name="orgName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="***DEPRECATED DPM 1.2.0*** This service will be deleted in a future release."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="RemoveUserFromGroup">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the group to remove the user from"
                         name="groupName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the user to remove from the group"
                         name="userName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Removes a user group from a passed in org unit"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="RemoveUserGroupFromOrgUnit">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the Organization that contains the org unit"
                         name="orgName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the Org Unit to remove the group from"
                         name="orgUnitName"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description="Name of the User Group to remove from the Org unit"
                         name="userGroupName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Dummy service that is used as a time delay in the Common Master user flow."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="TimeDelay">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Upgrade DPM solution to the latest and Migrate DPM. The default migration can be disabled by passing a config json."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="UpgradeSolution">
                    <ResultType
                     aspect.dataShape="PTC.Base.ComponentConfigStatus"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description="JSON parameter that is used to configure automated migration for the DPM solution and to initialize new building blocks. This config does not apply to UpgradeComponent services in individual building blocks."
                         name="config"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Checks the passed in JSON parameters against the parameter schema from the component's deploy config."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="ValidateComponentDeployParams">
                    <ResultType
                     baseType="BOOLEAN"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="THINGNAME"
                         description="Name of the component entrypoint to test params"
                         name="componentEntryPoint"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description="Passed in JSON object for deployment."
                         name="jsonParams"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Checks the passed in JSON parameters against the parameter schema from the component's migrate config."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="ValidateComponentMigrateParams">
                    <ResultType
                     baseType="BOOLEAN"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="THINGNAME"
                         description="Name of the component entrypoint to test params."
                         name="componentEntryPoint"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description="Passed in JSON object for migrate."
                         name="jsonParams"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Checks the passed in json parameters against the parameter schema from component's deploy/upgrade/migrate config."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="ValidateComponentParams">
                    <ResultType
                     baseType="BOOLEAN"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description="The action of Deploy or Upgrade or Migrate."
                         name="action"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="THINGNAME"
                         description="Name of the component entrypoint to test params"
                         name="componentEntryPoint"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description="passed in json object from deployment"
                         name="jsonParams"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Checks the passed in JSON parameters against the parameter schema from the component's upgrade config."
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="ValidateComponentUpgradeParams">
                    <ResultType
                     baseType="BOOLEAN"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="THINGNAME"
                         description="Name of the component entrypoint to test params"
                         name="componentEntryPoint"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="JSON"
                         description="Passed in JSON object for upgrade."
                         name="jsonParams"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
            </ServiceDefinitions>
            <EventDefinitions></EventDefinitions>
            <ServiceMappings></ServiceMappings>
            <ServiceImplementations>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="AddGroupToGroup">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var userManager = me.GetConfiguredThingNameForIdentifier({
                                    		identifier: "baseUserManager" /* STRING */
                                    	});
                                    
                                    	if (parentGroup && Groups[parentGroup] && childGroup && Groups[childGroup]) {
                                            Things[userManager].AddUserGroupToUserGroup({
                                                groupToAdd: childGroup /* STRING */ ,
                                                groupToAddTo: parentGroup /* STRING */
                                            });
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="AddGroupToOrgUnit">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var userManager = me.GetConfiguredThingNameForIdentifier({
                                    		identifier: "baseUserManager" /* STRING */
                                    	});
                                    
                                    	if (userGroupName && Groups[userGroupName] && orgName && Organizations[orgName] && orgUnitName) {
                                    
                                    		Things[userManager].AddUserGroupToOrgUnit({
                                    			groupName: userGroupName /* STRING */ ,
                                    			orgUnitName: orgUnitName /* STRING */ ,
                                    			orgName: orgName /* STRING */
                                    		});
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="AddNewComponent">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    if (namespace && !Projects[namespace]) {
                                    	try {
                                    		//Create Project
                                    		Resources["EntityServices"].CreateProject({
                                    			dependsOn: "PTC.Base" /* STRING */ ,
                                    			name: namespace /* STRING */
                                    		});
                                    
                                    		var dependentComponents = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    			infoTableName: "InfoTable",
                                    			dataShapeName: "PTC.Base.ComponentDescription"
                                    		});
                                    
                                    		dependentComponents.AddRow({
                                    			displayName: "Base",
                                    			name: "PTC.Base"
                                    		});
                                    
                                    		var entryPointName = namespace + ".EntryPoint";
                                            var entryPointTemplateName = namespace + ".EntryPoint_TT";
                                    		var managerThingShapeName = namespace + ".Management_TS";
                                    		var managerThingTemplate = namespace + ".Manager_TT";
                                    		var managerThingName = namespace + ".Manager";
                                    
                                            //Create App EntryPoint Template
                                            Resources["EntityServices"].CreateThingTemplate({
                                                name: entryPointTemplateName /* STRING */ ,
                                                description: description /* STRING */ ,
                                                thingTemplateName: "PTC.Base.ComponentEntryPoint_TT" /* THINGTEMPLATENAME */
                                            });
                                            
                                    		//Create App EntryPoint
                                    		Resources["EntityServices"].CreateThing({
                                    			name: entryPointName /* STRING */ ,
                                    			description: description /* STRING */ ,
                                    			thingTemplateName: entryPointTemplateName /* THINGTEMPLATENAME */
                                    		});
                                    
                                    		//Create App Manager Thing Shape
                                    		Resources["EntityServices"].CreateThingShape({
                                    			name: managerThingShapeName /* STRING */ ,
                                    			description: description /* STRING */
                                    		});
                                    
                                    		//Create App Manager Template
                                    		Resources["EntityServices"].CreateThingTemplate({
                                    			name: managerThingTemplate /* STRING */ ,
                                    			description: description /* STRING */ ,
                                    			thingTemplateName: "PTC.Base.CommonManager_TT" /* THINGTEMPLATENAME */
                                    		});
                                    
                                    		Resources["EntityServices"].AddShapeToThingTemplate({
                                    			name: managerThingTemplate /* THINGTEMPLATENAME */ ,
                                    			thingShapeName: managerThingShapeName /* THINGSHAPENAME */
                                    		});
                                    
                                    		//Create App Manager Thing
                                    		Resources["EntityServices"].CreateThing({
                                    			name: managerThingName /* STRING */ ,
                                    			description: description /* STRING */ ,
                                    			thingTemplateName: managerThingTemplate /* THINGTEMPLATENAME */
                                    		});
                                    
                                    		Things[entryPointName].EnableThing();
                                    		Things[entryPointName].RestartThing();
                                    
                                    		Things[managerThingName].EnableThing();
                                    		Things[managerThingName].RestartThing();
                                    
                                    		Things[entryPointName].componentDefaultOrg = namespace + ".Default_OR";
                                    		Things[entryPointName].componentDefaultUserGroup = namespace + ".Default_UG";
                                    		Things[entryPointName].componentDescription = description;
                                    		Things[entryPointName].componentName = (displayName) ? displayName : namespace;
                                    		Things[entryPointName].componentThumbnail = (thumbnail) ? thumbnail : "PTC.Base.ComponentIcon_ME";
                                    		Things[entryPointName].componentType = type;
                                    		Things[entryPointName].componentVersion = (version) ? version : "0.0.1";
                                    		Things[entryPointName].dependentComponents = dependentComponents;
                                    
                                    
                                    
                                    		//Add Entrypoint to Project
                                    		Things[entryPointName].SetProjectName({
                                    			projectName: namespace /* PROJECTNAME */
                                    		});
                                    
                                    		//Add Manager Shape to Project
                                    		ThingShapes[managerThingShapeName].SetProjectName({
                                    			projectName: namespace /* PROJECTNAME */
                                    		});
                                    
                                    		//Add Manager Template to Project
                                    		ThingTemplates[managerThingTemplate].SetProjectName({
                                    			projectName: namespace /* PROJECTNAME */
                                    		});
                                            
                                            //Add EntryPoint Template to Project
                                    		ThingTemplates[entryPointTemplateName].SetProjectName({
                                    			projectName: namespace /* PROJECTNAME */
                                    		});
                                    
                                    		//Add Manager Thing to Project
                                    		Things[managerThingName].SetProjectName({
                                    			projectName: namespace /* PROJECTNAME */
                                    		});
                                    
                                    		//Create Organization and Group
                                    		Resources["EntityServices"].CreateOrganization({
                                    			name: namespace + ".Default_OR" /* STRING */ ,
                                    			topOUName: "Root"
                                    		});
                                    
                                    		Resources["EntityServices"].CreateGroup({
                                    			name: namespace + ".Default_UG" /* STRING */
                                    		});
                                    
                                    		Organizations[namespace + ".Default_OR"].AddOrganizationalUnit({
                                    			parentName: "Root" /* STRING */ ,
                                    			name: namespace + ".Default_UG" /* STRING */
                                    		});
                                    
                                    		Organizations[namespace + ".Default_OR"].AddMember({
                                    			name: namespace + ".Default_UG" /* STRING */ ,
                                    			member: namespace + ".Default_UG" /* STRING */ ,
                                    			type: "Group" /* STRING */
                                    		});
                                    
                                    		Organizations[namespace + ".Default_OR"].SetProjectName({
                                    			projectName: namespace /* PROJECTNAME */
                                    		});
                                    
                                    		Groups[namespace + ".Default_UG"].SetProjectName({
                                    			projectName: namespace /* PROJECTNAME */
                                    		});
                                    
                                    		//Add Default UG to Base Default UG
                                    		Groups["PTC.Base.Default_UG"].AddMember({
                                    			member: namespace + ".Default_UG" /* STRING */ ,
                                    			type: "Group" /* STRING */
                                    		});
                                    
                                    		var defaultManagerConfiguration = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    			infoTableName: "InfoTable",
                                    			dataShapeName: "PTC.Base.ManagerConfiguration"
                                    		});
                                    
                                    		defaultManagerConfiguration.AddRow({
                                    			managerThingName: namespace + ".Manager",
                                    			id: "ComponentManager"
                                    		});
                                    
                                    		Things[entryPointName].SetConfigurationTable({
                                    			configurationTable: defaultManagerConfiguration /* INFOTABLE */ ,
                                    			persistent: true /* BOOLEAN */ ,
                                    			tableName: "ComponentManager" /* STRING */
                                    		});
                                    	} catch (err) {
                                    		logger.error(me.name+" - "+err.fileName+":"+err.lineNumber+" - "+err);
                                            //Delete component will purge any created entities that have become ghost entities
                                            me.DeleteComponent({
                                                namespace: namespace /* STRING */
                                            });
                                    		throw ("An error has occurred. Please check the script logs for more details.");
                                    	}
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="AddNewImplComponent">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    if (namespace && !Projects[namespace] && Projects[abstractComponentNamespace]) {
                                    	try {
                                    		//Create Project
                                    		Resources["EntityServices"].CreateProject({
                                    			dependsOn: "PTC.Base" /* STRING */ ,
                                    			name: namespace /* STRING */
                                    		});
                                    
                                    		var dependentComponents = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    			infoTableName: "InfoTable",
                                    			dataShapeName: "PTC.Base.ComponentDescription"
                                    		});
                                    
                                    		dependentComponents.AddRow({
                                    			displayName: "Base",
                                    			name: "PTC.Base"
                                    		});
                                    
                                    		var entryPointName = namespace + ".EntryPoint";
                                            var entryPointTemplateName = namespace + ".EntryPoint_TT";
                                            var entryPointAbstractTemplateName = abstractComponentNamespace+".EntryPoint_TT";
                                    		var managerThingShapeName = namespace + ".Management_TS";
                                    		var managerThingTemplate = namespace + ".Manager_TT";
                                            var managerAbstractThingTemplateName = abstractComponentNamespace + ".Manager_TT";
                                    		var managerThingName = namespace + ".Manager";
                                    
                                            //Create App EntryPoint Template
                                            Resources["EntityServices"].CreateThingTemplate({
                                                name: entryPointTemplateName /* STRING */ ,
                                                description: description /* STRING */ ,
                                                thingTemplateName: entryPointAbstractTemplateName /* THINGTEMPLATENAME */
                                            });
                                            
                                    		//Create App EntryPoint
                                    		Resources["EntityServices"].CreateThing({
                                    			name: entryPointName /* STRING */ ,
                                    			description: description /* STRING */ ,
                                    			thingTemplateName: entryPointTemplateName /* THINGTEMPLATENAME */
                                    		});
                                    
                                    		//Create App Manager Thing Shape
                                    		Resources["EntityServices"].CreateThingShape({
                                    			name: managerThingShapeName /* STRING */ ,
                                    			description: description /* STRING */
                                    		});
                                    
                                    		//Create App Manager Template
                                    		Resources["EntityServices"].CreateThingTemplate({
                                    			name: managerThingTemplate /* STRING */ ,
                                    			description: description /* STRING */ ,
                                    			thingTemplateName: managerAbstractThingTemplateName /* THINGTEMPLATENAME */
                                    		});
                                    
                                    		Resources["EntityServices"].AddShapeToThingTemplate({
                                    			name: managerThingTemplate /* THINGTEMPLATENAME */ ,
                                    			thingShapeName: managerThingShapeName /* THINGSHAPENAME */
                                    		});
                                    
                                    		//Create App Manager Thing
                                    		Resources["EntityServices"].CreateThing({
                                    			name: managerThingName /* STRING */ ,
                                    			description: description /* STRING */ ,
                                    			thingTemplateName: managerThingTemplate /* THINGTEMPLATENAME */
                                    		});
                                    
                                    		Things[entryPointName].EnableThing();
                                    		Things[entryPointName].RestartThing();
                                    
                                    		Things[managerThingName].EnableThing();
                                    		Things[managerThingName].RestartThing();
                                    
                                    		Things[entryPointName].componentDefaultOrg = namespace + ".Default_OR";
                                    		Things[entryPointName].componentDefaultUserGroup = namespace + ".Default_UG";
                                    		Things[entryPointName].componentDescription = description;
                                    		Things[entryPointName].componentName = (displayName) ? displayName : namespace;
                                    		Things[entryPointName].componentThumbnail = (thumbnail) ? thumbnail : "PTC.Base.ComponentIcon_ME";
                                    		Things[entryPointName].componentType = type;
                                    		Things[entryPointName].componentVersion = (version) ? version : "0.0.1";
                                    		Things[entryPointName].dependentComponents = dependentComponents;
                                    
                                    
                                    
                                    		//Add Entrypoint to Project
                                    		Things[entryPointName].SetProjectName({
                                    			projectName: namespace /* PROJECTNAME */
                                    		});
                                    
                                    		//Add Manager Shape to Project
                                    		ThingShapes[managerThingShapeName].SetProjectName({
                                    			projectName: namespace /* PROJECTNAME */
                                    		});
                                    
                                    		//Add Manager Template to Project
                                    		ThingTemplates[managerThingTemplate].SetProjectName({
                                    			projectName: namespace /* PROJECTNAME */
                                    		});
                                            
                                            //Add EntryPoint Template to Project
                                    		ThingTemplates[entryPointTemplateName].SetProjectName({
                                    			projectName: namespace /* PROJECTNAME */
                                    		});
                                            
                                    		//Add Manager Thing to Project
                                    		Things[managerThingName].SetProjectName({
                                    			projectName: namespace /* PROJECTNAME */
                                    		});
                                    
                                    		//Create Organization and Group
                                    		Resources["EntityServices"].CreateOrganization({
                                    			name: namespace + ".Default_OR" /* STRING */ ,
                                    			topOUName: "Root"
                                    		});
                                    
                                    		Resources["EntityServices"].CreateGroup({
                                    			name: namespace + ".Default_UG" /* STRING */
                                    		});
                                    
                                    		Organizations[namespace + ".Default_OR"].AddOrganizationalUnit({
                                    			parentName: "Root" /* STRING */ ,
                                    			name: namespace + ".Default_UG" /* STRING */
                                    		});
                                    
                                    		Organizations[namespace + ".Default_OR"].AddMember({
                                    			name: namespace + ".Default_UG" /* STRING */ ,
                                    			member: namespace + ".Default_UG" /* STRING */ ,
                                    			type: "Group" /* STRING */
                                    		});
                                    
                                    		Organizations[namespace + ".Default_OR"].SetProjectName({
                                    			projectName: namespace /* PROJECTNAME */
                                    		});
                                    
                                    		Groups[namespace + ".Default_UG"].SetProjectName({
                                    			projectName: namespace /* PROJECTNAME */
                                    		});
                                    
                                    		//Add Default UG to Base Default UG
                                    		Groups["PTC.Base.Default_UG"].AddMember({
                                    			member: namespace + ".Default_UG" /* STRING */ ,
                                    			type: "Group" /* STRING */
                                    		});
                                    
                                    		var defaultManagerConfiguration = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    			infoTableName: "InfoTable",
                                    			dataShapeName: "PTC.Base.ManagerConfiguration"
                                    		});
                                    
                                    		defaultManagerConfiguration.AddRow({
                                    			managerThingName: namespace + ".Manager",
                                    			id: "ComponentManager"
                                    		});
                                    
                                    		Things[entryPointName].SetConfigurationTable({
                                    			configurationTable: defaultManagerConfiguration /* INFOTABLE */ ,
                                    			persistent: true /* BOOLEAN */ ,
                                    			tableName: "ComponentManager" /* STRING */
                                    		});
                                    	} catch (err) {
                                    		logger.error(me.name+" - "+err.fileName+":"+err.lineNumber+" - "+err);
                                            //Delete component will purge any created entities that have become ghost entities
                                            me.DeleteComponent({
                                                namespace: namespace /* STRING */
                                            });
                                    		throw ("An error has occurred. Please check the script logs for more details.");
                                    	}
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="AddNewUserToComponent">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var userManager = me.GetConfiguredThingNameForIdentifier({
                                    		identifier: "baseUserManager" /* STRING */
                                    	});
                                    
                                    	if (componentManager && Things[componentManager] && userName) {
                                            var projectName = Things[componentManager].GetProjectName();
                                    
                                            if (!preferredPassword) {
                                                preferredPassword = "changeme123456";
                                            }
                                    
                                            Things[userManager].CreateUser({
                                                description: "User Created for " + projectName + " component." /* STRING */ ,
                                                name: userName /* STRING */ ,
                                                password: preferredPassword /* STRING */
                                            });
                                    
                                            Users[UserName].SetProjectName({
                                                projectName: projectName /* PROJECTNAME */
                                            });
                                    
                                            if (firstName) {
                                                Users[UserName].firstName = firstName;
                                            }
                                    
                                            if (lastName) {
                                                Users[UserName].lastName = lastName;
                                            }
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name+" - "+err.fileName+":"+err.lineNumber+" - "+err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="AddNewUserToUserGroup">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var userManager = me.GetConfiguredThingNameForIdentifier({
                                    		identifier: "baseUserManager" /* STRING */
                                    	});
                                    
                                    	if (userName && Users[userName] && groupName && Groups[groupName]) {
                                            Things[userManager].AddUserToUserGroup({
                                                userName: userName /* STRING */ ,
                                                userGroup: groupName /* STRING */
                                            });
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="AddOrganizationToComponent">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var userManager = me.GetConfiguredThingNameForIdentifier({
                                    		identifier: "baseUserManager" /* STRING */
                                    	});
                                    
                                    	if (componentManager && Things[componentManager] && orgName && !Organizations[orgName]) {
                                            var projectName = Things[componentManager].GetProjectName();
                                    
                                            if (!preferredOrgName) {
                                                preferredOrgName = "Root";
                                            }
                                    
                                            Things[userManager].CreateOrganization({
                                                initialOrgUnitName: preferredOrgName /* STRING */ ,
                                                orgName: orgName /* STRING */
                                            });
                                    
                                            Organizations[orgName].SetProjectName({
                                                projectName: projectName /* PROJECTNAME */
                                            });
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="AddOrgUnitToOrg">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var userManager = me.GetConfiguredThingNameForIdentifier({
                                    		identifier: "baseUserManager" /* STRING */
                                    	});
                                    
                                    	if (orgName && Organizations[orgName] && orgUnitName && parentOrgUnitName) {
                                            Things[userManager].AddOrgUnitToOrganization({
                                                orgUnit: orgUnitName /* STRING */ ,
                                                parentOrgUnit: parentOrgUnitName /* STRING */ ,
                                                orgName: orgName /* STRING */
                                            });
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("A error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="AddUserGroupToComponent">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var userManager = me.GetConfiguredThingNameForIdentifier({
                                    		identifier: "baseUserManager" /* STRING */
                                    	});
                                    
                                    	if (componentManager && Things[componentManager]) {
                                    		if (userGroupName && userGroupDescription) {
                                                var projectName = Things[componentManager].GetProjectName();
                                    
                                                if (!Groups[userGroupName]) {
                                                    Things[userManager].CreateUserGroup({
                                                        name: userGroupName /* STRING */ ,
                                                        description: userGroupDescription /* STRING */
                                                    });
                                    
                                                    Groups[userGroupName].SetProjectName({
                                                        projectName: projectName /* PROJECTNAME */
                                                    });
                                    
                                                    if (userGroupName != projectName + ".Default_UG") {
                                                        Groups[projectName + ".Default_UG"].AddMember({
                                                            member: userGroupName /* STRING */ ,
                                                            type: "Group" /* STRING */
                                                        });
                                                    }
                                    
                                                    me.AddOrgUnitToOrg({
                                                        orgUnitName: userGroupName /* STRING */ ,
                                                        orgName: projectName + ".Default_OR" /* STRING */ ,
                                                        parentOrgUnitName: "Root" /* STRING */
                                                    });
                                    
                                                    me.AddGroupToOrgUnit({
                                                        orgUnitName: userGroupName /* STRING */ ,
                                                        userGroupName: userGroupName /* STRING */ ,
                                                        orgName: projectName + ".Default_OR" /* STRING */
                                                    });
                                                }
                                    		}
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="CollectSolutionStatus">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var result = DataShapes["PTC.Base.ComponentConfigStatus"].CreateValues();
                                    let propertyName = action.toLowerCase() + "ComponentStatus";
                                    let componentDeployOrder = me.GetComponentDeploymentOrder();
                                    
                                    componentDeployOrder.array.forEach(item => {
                                    	let entryPoint = Things[item + ".EntryPoint"];
                                    	let name = entryPoint[propertyName].name;
                                    	let type = entryPoint[propertyName].type;
                                    	let status = entryPoint[propertyName].status;
                                    	let additionalInfo = entryPoint[propertyName].additionalInfo;
                                    	let newEntry = {
                                    		name: name,
                                    		type: type,
                                    		status: status,
                                    		additionalInfo: additionalInfo
                                    	};
                                    	result.AddRow(newEntry);
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="DeleteComponent">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let PROJECT_ENTITIES = Projects[namespace].GetEntities();
                                    
                                    
                                    deleteEntities("Thing|User|Group|MediaEntity|StyleDefinition");
                                    deleteEntities("ThingTemplate|Organization|Network");
                                    deleteEntities("ThingShape");
                                    
                                     
                                    
                                    if (PROJECT_ENTITIES.getRowCount() == 1) {
                                        deleteEntities("Project");   
                                    } else {
                                        logger.error("Could not delete all entities under namespace {} - {}", namespace, PROJECT_ENTITIES.ToJSON());
                                    }
                                    
                                     
                                    
                                    function deleteEntities(validEntityTypes) {
                                        PROJECT_ENTITIES.rows.toArray().forEach(function(entity, index, entityArray) {
                                            let entityType = entity.type;
                                            let isValidEntity = String(entityType).match(validEntityTypes);
                                            if (isValidEntity) {
                                                let deleted = deleteEntity(entity.name, entityType);
                                                if (deleted) {
                                                    entityArray.splice(index, 1);
                                                }
                                            }
                                        });
                                    }
                                    
                                     
                                    
                                    function deleteEntity(entityName, entityType) {
                                        try {
                                            Resources["EntityServices"]["Delete" + entityType]({
                                                name: entityName /* THINGNAME */
                                            });
                                            return true;
                                        } catch (err) {
                                            logger.warn("{} - {}:{} - {}", me.name, err.fileName, err.lineName, err);
                                        }
                                        return false;
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="DeleteComponentUserGroup">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var userManager = me.GetConfiguredThingNameForIdentifier({
                                    		identifier: "baseUserManager" /* STRING */
                                    	});
                                    
                                    	if (userGroupName && Groups[userGroupName]) {
                                            var groupMembers = Groups[userGroupName].GetGroupMembers();
                                    
                                            if (groupMembers && groupMembers.rows.length > 0) {
                                                groupMembers.rows.toArray().forEach(row => {
                                                    Groups[userGroupName].DeleteMember({
                                                        member: row.name /* STRING */ ,
                                                        type: row.type /* STRING */
                                                    });
                                                });
                                            }
                                    
                                            var groups = Groups[userGroupName].GetGroups();
                                            if (groups && groups.rows.length > 0) {
                                                groups.rows.toArray().forEach(row => {
                                                    Groups[row.name].DeleteMember({
                                                        member: userGroupName /* STRING */ ,
                                                        type: "Group" /* STRING */
                                                    });
                                                });
                                            }
                                    
                                            Things[userManager].DeleteUserGroup({
                                                groupName: userGroupName /* STRING */
                                            });
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="DeleteComponentUsers">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var userManager = me.GetConfiguredThingNameForIdentifier({
                                    		identifier: "baseUserManager" /* STRING */
                                    	});
                                    
                                    	if (userName && Users[userName]) {
                                            var groups = Users[userName].GetGroups();
                                            if (groups && groups.rows.length > 0) {
                                                groups.rows.toArray().forEach(row => {
                                                    Groups[row.name].DeleteMember({
                                                        member: userName /* STRING */ ,
                                                        type: "User" /* STRING */
                                                    });
                                                });
                                            }
                                    
                                            Things[userManager].DeleteUser({
                                                userName: userName /* STRING */
                                            });
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="DeleteOrgUnitFromOrganization">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var userManager = me.GetConfiguredThingNameForIdentifier({
                                    		identifier: "baseUserManager" /* STRING */
                                    	});
                                    
                                    	if (orgName && Organizations[orgName] && orgUnitName && orgUnitName != "Root") {
                                            Things[userManager].DeleteOrgUnit({
                                                orgUnitName: orgUnitName /* STRING */ ,
                                                orgName: orgName /* STRING */
                                            });
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="FixDefaultUserGroupHierarchy">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	if (projectName && Projects[projectName]) {
                                    		var dependentProjects = Projects[projectName].GetAllDependentProjectNames();
                                    		if (dependentProjects && dependentProjects.rows.length > 0) {
                                    			dependentProjects.rows.toArray().forEach(row => {
                                    				if (row.name != projectName && Groups[row.name + ".Default_UG"] && Groups[projectName + ".Default_UG"]) {
                                    					Groups[row.name + ".Default_UG"].AddMember({
                                    						member: projectName + ".Default_UG" /* STRING */ ,
                                    						type: "Group" /* STRING */
                                    					});
                                    				}
                                    			});
                                    		}
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetAllDependentComponentsForComponent">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    		infoTableName: "InfoTable",
                                    		dataShapeName: "GenericStringList"
                                    	});
                                    
                                    	if (projectName && Projects[projectName]) {
                                    		result = Projects[projectName].GetAllDependentProjectNames();
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetAllMashupsForUserGroup">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    		infoTableName: "InfoTable",
                                    		dataShapeName: "EntityReference"
                                    	});
                                    
                                    	if (userGroupName && Groups[userGroupName]) {
                                    		//Create a User
                                    		var username = generateGUID();
                                    		Resources["EntityServices"].CreateUser({
                                    			password: "a8dje87&wi32jw8?/wlDw2:" /* STRING */ ,
                                    			name: username /* STRING */
                                    		});
                                    
                                    		//Place new user in passed in user group
                                    		Groups[userGroupName].AddMember({
                                    			member: username /* STRING */ ,
                                    			type: "User" /* STRING */
                                    		});
                                    
                                    		//assign 'GetAllMashupsForUserREST' service to passed in user group
                                    		me.AddRunTimePermission({
                                    			principal: userGroupName /* STRING */ ,
                                    			allow: true /* BOOLEAN */ ,
                                    			resource: "GetAllMashupsForUserREST" /* STRING */ ,
                                    			type: "ServiceInvoke" /* STRING */ ,
                                    			principalType: "Group" /* STRING */
                                    		});
                                    
                                    		//Create an Application Key for created user
                                    		var appKeyName = "appkey-" + generateGUID();
                                    		Resources["EntityServices"].CreateApplicationKey({
                                    			name: appKeyName /* STRING */ ,
                                    			user: username /* USERNAME */
                                    		});
                                    
                                    		//Make Rest Call to 'GetAllMashupsForUserREST' with new appKey
                                    		var response = Resources["ContentLoaderFunctions"].PostJSON({
                                    			headers: {
                                    				"appKey": ApplicationKeys[appKeyName].GetKeyID(),
                                    				"Content-Type": "application/json",
                                    				"Accept": "application/json"
                                    			} /* JSON */ ,
                                    			ignoreSSLErrors: true /* BOOLEAN */ ,
                                    			url: me.ThingWorxURL + "/Thingworx/Things/PTC.Base.Manager/Services/GetAllMashupsForUserREST" /* STRING */ ,
                                    		});
                                    
                                    		//Parse JSON response into an result infotable
                                    		if (response && response.mashups && response.mashups.length > 0) {
                                    			response.mashups.toArray().forEach(row => {
                                    				result.AddRow({
                                    					name: row,
                                    					type: "Mashup"
                                    				});
                                    			});
                                    		} else {
                                    			result.AddRow({
                                    				name: "(None)",
                                    				type: "Mashup"
                                    			});
                                    		}
                                    		//Delete Application Key
                                    		Resources["EntityServices"].DeleteApplicationKey({
                                    			name: appKeyName /* APPLICATIONKEYNAME */
                                    		});
                                    
                                    		//Remove User from Group
                                    		Groups[userGroupName].DeleteMember({
                                    			member: username /* STRING */ ,
                                    			type: "User" /* STRING */
                                    		});
                                    
                                    		//Delete User
                                    		Resources["EntityServices"].DeleteUser({
                                    			name: username /* USERNAME */
                                    		});
                                    
                                    		//un assign service invoke permissions on '-GetAllMashupsForUserREST' group
                                    		me.DeleteRunTimePermission({
                                    			principal: userGroupName /* STRING */ ,
                                    			resource: "GetAllMashupsForUserREST" /* STRING */ ,
                                    			type: "ServiceInvoke" /* STRING */ ,
                                    			principalType: "Group" /* STRING */
                                    		});
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetAllMashupsForUserREST">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var result = {};
                                    	result.mashups = [];
                                    
                                    	var mashups = Resources["EntityServices"].GetEntityList({
                                    		maxItems: 10000 /* NUMBER */ ,
                                    		type: "Mashup" /* STRING */
                                    	});
                                    
                                    	if (mashups && mashups.rows.length > 0) {
                                    		mashups.rows.toArray().forEach(row => {
                                    			result.mashups.push(row.name);
                                    		});
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetAllThingsForUserGroup">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    		infoTableName: "InfoTable",
                                    		dataShapeName: "EntityReference"
                                    	});
                                    
                                    	if (userGroupName && Groups[userGroupName]) {
                                    		//Create a User
                                    		var username = generateGUID();
                                    		Resources["EntityServices"].CreateUser({
                                    			password: "a8dje87&wi32jw8?/wlDw2:" /* STRING */ ,
                                    			name: username /* STRING */
                                    		});
                                    
                                    		//Place new user in passed in user group
                                    		Groups[userGroupName].AddMember({
                                    			member: username /* STRING */ ,
                                    			type: "User" /* STRING */
                                    		});
                                    
                                    		//assign 'GetAllMashupsForUserREST' service to passed in user group
                                    		me.AddRunTimePermission({
                                    			principal: userGroupName /* STRING */ ,
                                    			allow: true /* BOOLEAN */ ,
                                    			resource: "GetAllThingsForUserREST" /* STRING */ ,
                                    			type: "ServiceInvoke" /* STRING */ ,
                                    			principalType: "Group" /* STRING */
                                    		});
                                    
                                    		//Create an Application Key for created user
                                    		var appKeyName = "appkey-" + generateGUID();
                                    		Resources["EntityServices"].CreateApplicationKey({
                                    			name: appKeyName /* STRING */ ,
                                    			user: username /* USERNAME */
                                    		});
                                    
                                    		//Make Rest Call to 'GetAllMashupsForUserREST' with new appKey
                                    		var response = Resources["ContentLoaderFunctions"].PostJSON({
                                    			headers: {
                                    				"appKey": ApplicationKeys[appKeyName].GetKeyID(),
                                    				"Content-Type": "application/json",
                                    				"Accept": "application/json"
                                    			} /* JSON */ ,
                                    			ignoreSSLErrors: true /* BOOLEAN */ ,
                                    			url: me.ThingWorxURL + "/Thingworx/Things/PTC.Base.Manager/Services/GetAllThingsForUserREST" /* STRING */ ,
                                    		});
                                    
                                    		//Parse JSON response into an result infotable
                                    		if (response && response.mashups && response.mashups.length > 0) {
                                    			response.mashups.toArray().forEach(row => {
                                    				result.AddRow({
                                    					name: row,
                                    					type: "Thing"
                                    				});
                                    			});
                                    		} else {
                                    			result.AddRow({
                                    				name: "(None)",
                                    				type: "Mashup"
                                    			});
                                    		}
                                    		//Delete Application Key
                                    		Resources["EntityServices"].DeleteApplicationKey({
                                    			name: appKeyName /* APPLICATIONKEYNAME */
                                    		});
                                    
                                    		//Remove User from Group
                                    		Groups[userGroupName].DeleteMember({
                                    			member: username /* STRING */ ,
                                    			type: "User" /* STRING */
                                    		});
                                    
                                    		//Delete User
                                    		Resources["EntityServices"].DeleteUser({
                                    			name: username /* USERNAME */
                                    		});
                                    
                                    		//un assign service invoke permissions on '-GetAllMashupsForUserREST' group
                                    		me.DeleteRunTimePermission({
                                    			principal: UserGroupName /* STRING */ ,
                                    			resource: "GetAllThingsForUserREST" /* STRING */ ,
                                    			type: "ServiceInvoke" /* STRING */ ,
                                    			principalType: "Group" /* STRING */
                                    		});
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetAllThingsForUserREST">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var result = {};
                                    	result.mashups = [];
                                    
                                    	var mashups = Resources["EntityServices"].GetEntityList({
                                    		maxItems: 10000 /* NUMBER */ ,
                                    		type: "Thing" /* STRING */
                                    	});
                                    
                                    	if (mashups && mashups.rows.length > 0) {
                                    		mashups.rows.toArray().forEach(row => {
                                    			result.mashups.push(row.name);
                                    		});
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetComponentDeploymentOrder">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var result = JSON.stringify(getComponentDeploymentOrder(new Object(), []));
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    
                                    
                                    /**
                                     *	getComponentDeploymentOrder - Recursive function that traverses the component dependencies to build a deployment order.
                                     */
                                    function getComponentDeploymentOrder(dependencies, deploymentOrder) {
                                        let recursionNeeded = false;
                                    	let projectList = Resources["EntityServices"].GetEntityList({
                                    		type: "Project" /* STRING */
                                    	});
                                    
                                    	projectList.rows.toArray().forEach(row => {
                                            if(Things[row.name+".EntryPoint"]) {
                                                if(!dependencies[row.name]) {
                                                    let isEligibleForAdd = true;
                                                    let dependentProjects = me.GetAllDependentComponentsForComponent({
                                                        projectName: row.name /* STRING */
                                                    });
                                                    dependentProjects.rows.toArray().forEach(dependentRow => {
                                                        if (dependentRow.item != row.name && !dependencies[dependentRow.item] && Things[dependentRow.item+".EntryPoint"]) {
                                                            isEligibleForAdd = false;
                                                        }
                                                    });
                                                    if (isEligibleForAdd) {
                                                        deploymentOrder.push(row.name);
                                                        dependencies[row.name] = row.name;
                                                        recursionNeeded = true;
                                                    }
                                                }
                                            }
                                    	});
                                        
                                        if(recursionNeeded) {
                                         	getComponentDeploymentOrder(dependencies, deploymentOrder);   
                                        }
                                    
                                    	return deploymentOrder;
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetComponentDeploymentStatus">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                        var result = DataShapes["PTC.Base.ComponentConfigStatus"].CreateValues();
                                        let componentEntryPoints = ThingTemplates["PTC.Base.ComponentEntryPoint_TT"].QueryImplementingThings();
                                        componentEntryPoints.rows.toArray().forEach(row => {
                                            var component = Things[row.name];
                                        	result.AddRow({
                                            	 name: component.GetProjectName(),
                                                status: component.componentDeploymentState
                                            });
                                        });
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetComponentList">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    		infoTableName: "InfoTable",
                                    		dataShapeName: "PTC.Base.ComponentDescription"
                                    	});
                                    
                                    	var components = ThingTemplates["PTC.Base.ComponentEntryPoint_TT"].QueryImplementingThings({
                                    		maxItems: 1000 /* NUMBER */
                                    	});
                                    
                                    	if (components && components.rows.length > 0) {
                                    		components.rows.toArray().forEach(row => {
                                                let thing = Things[row.name];
                                    			result.AddRow({
                                    				name: thing.GetProjectName(),
                                    				displayName: thing.GetComponentName(),
                                    				description: thing.GetComponentDescription(),
                                    				version: thing.GetComponentVersion(),
                                    				thumbnail: thing.GetComponentThumbnail(),
                                    				type: thing.GetComponentType(),
                                    				entryPoint: thing.GetConfiguredComponentManager()
                                    			});
                                    		});
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetComponentOrganizations">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    		infoTableName: "InfoTable",
                                    		dataShapeName: "EntityList"
                                    	});
                                    
                                    	if (componentManager && Things[componentManager]) {
                                    		var projectName = Things[componentManager].GetProjectName();
                                    
                                    		var projectEntities = Projects[projectName].GetEntities();
                                    
                                    		if (projectEntities && projectEntities.rows.length > 0) {
                                    			projectEntities.rows.toArray().forEach(row => {
                                    				if (Organizations[row.name]) {
                                    					result.AddRow({
                                    						name: row.name,
                                    						description: row.name
                                    					});
                                    				}
                                    			});
                                    		}
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetComponentUserGroups">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    		infoTableName: "InfoTable",
                                    		dataShapeName: "EntityList"
                                    	});
                                    
                                    	if (componentManager && Things[componentManager]) {
                                    		var projectName = Things[componentManager].GetProjectName();
                                    
                                    		var projectEntities = Projects[projectName].GetEntities();
                                    
                                    		if (projectEntities && projectEntities.rows.length > 0) {
                                    			projectEntities.rows.toArray().forEach(row => {
                                    				if (Groups[row.name]) {
                                    					result.AddRow({
                                    						name: row.name,
                                    						description: Groups[row.name].GetDescription()
                                    					});
                                    				}
                                    			});
                                    		}
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetComponentUsers">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    		infoTableName: "InfoTable",
                                    		dataShapeName: "PTC.Base.UserProperties"
                                    	});
                                    
                                    	if (componentManager && Things[componentManager]) {
                                    		var projectName = Things[componentManager].GetProjectName();
                                    
                                    		var projectEntities = Projects[projectName].GetEntities();
                                    
                                    		if (projectEntities && projectEntities.rows.length > 0) {
                                    			projectEntities.rows.toArray().forEach(row => {
                                    				if (Users[row.name]) {
                                    					result.AddRow({
                                    						firstName: Users[row.name].firstName,
                                    						lastName: Users[row.name].lastName,
                                    						userName: row.name,
                                    						description: Users[row.name].GetDescription()
                                    					});
                                    				}
                                    			});
                                    		}
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetConfigurationParameters">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    const DEPLOY = "Deploy";
                                    const UPGRADE = "Upgrade";
                                    const MIGRATE = "Migrate";
                                    
                                    try {
                                    	var result = new Object();
                                    	if (action == DEPLOY || action == UPGRADE || action == MIGRATE) {
                                    		let serviceName = "GetComponent" + action + "ConfigurationParameters";
                                    		let listOfEntryPoints = ThingTemplates["PTC.Base.ComponentEntryPoint_TT"].QueryImplementingThings();
                                    
                                    		listOfEntryPoints.rows.toArray().forEach(row => {
                                    			let entryPoint = Things[row.name];
                                    			if (entryPoint) {
                                    				let jsonParams = entryPoint[serviceName]();
                                    				for (var key in jsonParams) {
                                    					result[key] = jsonParams[key];
                                    				}
                                    				if (action == UPGRADE) {
                                    					let deployServiceName = "GetComponent" + DEPLOY + "ConfigurationParameters";
                                    					let deployParams = entryPoint[deployServiceName]();
                                    					for (var k in deployParams) {
                                    						result[k] = deployParams[k];
                                    					}
                                    				}
                                    			}
                                    		});
                                    	} else {
                                    		throw new Error("Input action is invalid");
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetGroupsInOrgUnit">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var userManager = me.GetConfiguredThingNameForIdentifier({
                                    		identifier: "baseUserManager" /* STRING */
                                    	});
                                    
                                        var result = Things[userManager].GetUserGroupsInOrgUnit({
                                            orgUnitName: orgUnit /* STRING */ ,
                                            orgName: orgName /* STRING */
                                        });
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("A configuration error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetOrganizationUnitStructure">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    		infoTableName: "InfoTable",
                                    		dataShapeName: "OrganizationConnection"
                                    	});
                                    
                                    	if (organization && Organizations[organization]) {
                                    		result = Organizations[organization].GetOrganizationConnections({
                                    			maxDepth: 10 /* NUMBER */
                                    		});
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetServiceInvokePermissionsForUserGroupAndThing">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    		infoTableName: "InfoTable",
                                    		dataShapeName: "RunTimePermissions"
                                    	});
                                    
                                    	if (userGroupName && Groups[userGroupName] && selectedThingName && Things[selectedThingName]) {
                                    		var hasPermissions = false;
                                    		var thingPermissions = Things[selectedThingName].GetRunTimePermissions();
                                    
                                    		if (thingPermissions && thingPermissions.rows.length > 0) {
                                    			thingPermissions.rows.toArray().forEach(row => {
                                    				if (row.name == userGroupName && row.permissionName == "ServiceInvoke" && row.isPermitted) {
                                    					hasPermissions = true;
                                    					result.AddRow(row);
                                    				}
                                    			});
                                    		}
                                    		if (!hasPermissions) {
                                    			result.AddRow({
                                    				resourceName: "(None)"
                                    			});
                                    		}
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetSolutionDeploymentConfigurationParameters">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	let ACTION = "Deploy";
                                    	result = me.GetConfigurationParameters({
                                    		action: ACTION
                                    	});
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetSolutionMigrateConfigurationParameters">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	let ACTION = "Migrate";
                                    	result = me.GetConfigurationParameters({
                                    		action: ACTION
                                    	});
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetSolutionNameForMashup">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var result = "";
                                    	if (mashupName && Mashups[mashupName]) {
                                    		var entryPoint = Mashups[mashupName].GetProjectName() + ".EntryPoint";
                                    		if (entryPoint && Things[entryPoint]) {
                                    			result = Things[entryPoint].componentName;
                                    		}
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetSolutions">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    		infoTableName: "InfoTable",
                                    		dataShapeName: "PTC.Base.SolutionPickerData"
                                    	});
                                    
                                    	var entryPoints = ThingTemplates["PTC.Base.ComponentEntryPoint_TT"].GetImplementingThings();
                                    
                                    	if (entryPoints && entryPoints.rows.length > 0) {
                                    		var i = 0;
                                    		entryPoints.rows.toArray().forEach(row => {
                                    			var thing = Things[row.name];
                                    			if (thing && (thing.ComponentType == "Solution" || thing.ComponentType == "Foundation")) {
                                    				result.AddRow({
                                    					solutionName: thing.ComponentName,
                                    					solutionProject: thing.GetProjectName(),
                                    					solutionMashup: thing.ComponentMainMashup,
                                    					solutionIcon: thing.ComponentThumbnail,
                                    					uid: i + 1
                                    				});
                                    			}
                                    			i++;
                                    		});
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetSolutionUpgradeAndMigrateStatus">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	let upgradeResult = me.CollectSolutionStatus({
                                    		action: "Upgrade"
                                    	});
                                    	if (!config || config.automatedMigration == true) {
                                    		let migrateResult = me.CollectSolutionStatus({
                                    			action: "Migrate"
                                    		});
                                    		migrateResult.rows.toArray().forEach(row => {
                                    			upgradeResult.AddRow(row);
                                    		});
                                    	}
                                    	result = upgradeResult;
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetSolutionUpgradeConfigurationParameters">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	let ACTION = "Upgrade";
                                    	result = me.GetConfigurationParameters({
                                    		action: ACTION
                                    	});
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetUserProfileMenu">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "MenuEntry"
                                    });
                                    
                                    var menuId = 3;
                                    try {
                                    	result.AddRow({
                                    		description: "", //shape.description,
                                    		title: "Dummy",
                                    		linkType: "Menu",
                                    		isDefault: false, //isDefault,
                                    		menuId: "1"
                                    	});
                                    
                                    	result.AddRow({
                                    		description: "", //shape.description,
                                    		title: "",
                                    		linkType: "Menu",
                                    		isDefault: false, //isDefault,
                                    		menuId: "2",
                                    		parentMenuId: "1",
                                    		imageURL: "PTC.Base.QuestionMark_MD"
                                    	});
                                    
                                    	result.AddRow({
                                    		description: "",
                                    		title: "[[PTC.Base.HelpCenter]]",
                                    		linkTarget: "New",
                                    		linkType: "Hyperlink",
                                    		isDefault: false,
                                    		menuId: "helpCenter",
                                    		parentMenuId: "2",
                                    		linkDestination: getHelpCenterURL()
                                    	});
                                    
                                    	result.AddRow({
                                    		description: "",
                                    		title: "[[PTC.Base.About]]",
                                    		linkTarget: "Self",
                                    		linkType: "Mashup",
                                    		isDefault: false,
                                    		menuId: "about",
                                    		parentMenuId: "2",
                                    		linkDestination: Mashups['PTC.DPM.AboutCopyright_MU'] ? 'PTC.DPM.AboutCopyright_MU' : ''
                                    	});
                                    } catch (err) {
                                    	logger.error("Thing [{}] Service [{}] error at line [{}] : {}", me.name, err.fileName, err.lineNumber, err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    
                                    function getHelpCenterURL() {
                                    	let currentLanguage = Resources["CurrentSessionInfo"].GetCurrentUserLanguage().split(',')[0];
                                    	currentLanguage = currentLanguage && currentLanguage != "Default" ? currentLanguage : "en";
                                    	return "https://support.ptc.com/help/digital_performance_management/r1.1/" + currentLanguage;
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetUsersInGroup">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var userManager = me.GetConfiguredThingNameForIdentifier({
                                    		identifier: "baseUserManager" /* STRING */
                                    	});
                                    
                                    	if (groupName && Groups[groupName]) {
                                            var result = Things[userManager].GetUsersInUserGroup({
                                                groupName: groupName /* STRING */
                                            });
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="InitializeSolution">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    if (deploymentConfig) {
                                    	let componentDeployOrder = me.GetComponentDeploymentOrder();
                                    	let overrideComponentDeploymentState = deploymentConfig.overrideComponentDeploymentState && deploymentConfig.overrideComponentDeploymentState == true;
                                    	componentDeployOrder.array.forEach(item => {
                                    		let entryPoint = Things[item + ".EntryPoint"];
                                    		try {
                                    			let isValidDeployConfigParams = me.ValidateComponentDeployParams({
                                    				jsonParams: deploymentConfig,
                                    				componentEntryPoint: entryPoint.name
                                    			});
                                    			if ((overrideComponentDeploymentState && isValidDeployConfigParams) || (entryPoint.componentDeploymentState !== "Configured" && isValidDeployConfigParams)) {
                                    
                                    				let success = entryPoint.DeployComponent({
                                    					deploymentConfig: deploymentConfig /* JSON */
                                    				});
                                    				if (success) {
                                    					entryPoint.componentDeploymentState = "Configured";
                                    				}
                                    			}
                                    		} catch (err) {
                                    			logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    			entryPoint.componentDeploymentState = "Error";
                                    		}
                                    	});
                                    
                                    	var result = me.GetComponentDeploymentStatus();
                                    } else {
                                    	throw "No configuration params supplied for deployment. Run GetSolutionConfigurationParameters service for list of parameters to supply";
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="MigrateSolution">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    const ACTION = "Migrate";
                                    try {
                                    	me.PreMigrateSolution({
                                    		config: config
                                    	});
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw err;
                                    }
                                    
                                    result = me.ProcessSolution({
                                    	action: ACTION,
                                    	config: config
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="PreMigrateSolution">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let serviceName = "PreMigrateComponent";
                                    const ERROR = "error";
                                    var result = DataShapes["PTC.Base.ComponentConfigStatus"].CreateValues();
                                    try {
                                    	let componentDeployOrder = me.GetComponentDeploymentOrder();
                                    	componentDeployOrder.array.forEach(bbName => {
                                    		let entryPoint = Things[bbName + ".EntryPoint"];
                                    		let preMigrateComponent = entryPoint[serviceName]({
                                    			config: config
                                    		});
                                    		if (preMigrateComponent && preMigrateComponent.status && preMigrateComponent.status.toLowerCase() == ERROR) {
                                    			let errorMsg = "Pre-migration validation failed for " + bbName;
                                    			if (preMigrateComponent.additionalInfo) {
                                    				errorMsg = errorMsg + preMigrateComponent.additionalInfo;
                                    			}
                                    			throw new Error(errorMsg);
                                    		}
                                    	});
                                    } catch (err) {
                                    	logger.error("Thing [{}] Service [{}] error at line [{}] : {}", me.name, err.fileName, err.lineNumber, err);
                                    	throw err;
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="PreUpgradeSolution">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let serviceName = "PreUpgradeComponent";
                                    const ERROR = "error";
                                    var result = DataShapes["PTC.Base.ComponentConfigStatus"].CreateValues();
                                    try {
                                    	let componentDeployOrder = me.GetComponentDeploymentOrder();
                                    	componentDeployOrder.array.forEach(bbName => {
                                    		let entryPoint = Things[bbName + ".EntryPoint"];
                                    		let preUpgradeComponent = entryPoint[serviceName]({
                                    			config: config
                                    		});
                                    		if (preUpgradeComponent && preUpgradeComponent.status && preUpgradeComponent.status.toLowerCase() == ERROR) {
                                    			let errorMsg = "Pre-upgrade validation failed for " + bbName;
                                    			if (preUpgradeComponent.additionalInfo) {
                                    				errorMsg = errorMsg + preUpgradeComponent.additionalInfo;
                                    			}
                                    			throw new Error(errorMsg);
                                    		}
                                    	});
                                    } catch (err) {
                                    	logger.error("Thing [{}] Service [{}] error at line [{}] : {}", me.name, err.fileName, err.lineNumber, err);
                                    	throw err;
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="ProcessSolution">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    const SUCCESSFUL = "Successful";
                                    const TYPE = action;
                                    const ERROR = "Error";
                                    const NOT_PROCESSED = "Not Processed";
                                    let serviceName = action + "Component";
                                    let propertyName = action.toLowerCase() + "ComponentStatus";
                                    
                                    let componentDeployOrder = me.GetComponentDeploymentOrder();
                                    try {
                                    	setStatusProperties(componentDeployOrder);
                                    	componentDeployOrder.array.forEach(item => {
                                    		let entryPoint = Things[item + ".EntryPoint"];
                                    		if (entryPoint) {
                                    			if (entryPoint[propertyName].status != SUCCESSFUL) {
                                    				try {
                                    					entryPoint[serviceName]({
                                    						config: config
                                    					});
                                    					if (entryPoint.componentDeploymentState != "Configured") {
                                    						throw new Error(item + " is not configured.");
                                    					}
                                    					entryPoint[propertyName].type = TYPE;
                                    					entryPoint[propertyName].status = SUCCESSFUL;
                                    				} catch (err) {
                                    					entryPoint[propertyName].type = TYPE;
                                    					entryPoint[propertyName].status = ERROR;
                                    					logger.error("Thing [{}] Service [{}] error at line [{}] : {}", me.name, err.fileName, err.lineNumber, err);
                                    					throw new Error(action + " failed at component " + item);
                                    				}
                                    			}
                                    		}
                                    	});
                                    	result = me.CollectSolutionStatus({
                                    		action: action
                                    	});
                                    } catch (err) {
                                    	logger.error("Thing [{}] Service [{}] error at line [{}] : {}", me.name, err.fileName, err.lineNumber, err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    
                                    function setStatusProperties(componentDeployOrder) {
                                    	componentDeployOrder.array.forEach(item => {
                                    		let entryPoint = Things[item + ".EntryPoint"];
                                    		if (!entryPoint[propertyName].name) {
                                    			entryPoint[propertyName].name = item;
                                    		}
                                    		if (!entryPoint[propertyName].status) {
                                    			entryPoint[propertyName].status = NOT_PROCESSED;
                                    		}
                                    	});
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="RemoveOrganizationFromComponent">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var userManager = me.GetConfiguredThingNameForIdentifier({
                                    		identifier: "baseUserManager" /* STRING */
                                    	});
                                    
                                    	if (OrgName && Organizations[OrgName]) {
                                            Things[userManager].DeleteOrganization({
                                                orgName: orgName /* STRING */
                                            });
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="RemoveUserFromGroup">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var userManager = me.GetConfiguredThingNameForIdentifier({
                                    		identifier: "baseUserManager" /* STRING */
                                    	});
                                    
                                    	if (userName && Users[userName] && groupName && Groups[groupName]) {
                                            Things[userManager].RemoveUserFromUserGroup({
                                                userName: userName /* STRING */ ,
                                                userGroup: groupName /* STRING */
                                            });
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="RemoveUserGroupFromOrgUnit">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                    	var userManager = me.GetConfiguredThingNameForIdentifier({
                                    		identifier: "baseUserManager" /* STRING */
                                    	});
                                    
                                    	if (userGroupName && Groups[userGroupName] && orgName && Organizations[orgName] && orgUnitName) {
                                            Things[userManager].RemoveUserGroupFromOrganizationUnit({
                                                groupName: userGroupName /* STRING */ ,
                                                orgUnitName: orgUnitName /* STRING */ ,
                                                orgName: orgName /* STRING */
                                            });
                                    	}
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw ("An error has occurred. Please check the script logs for more details.");
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="TimeDelay">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var result = 1+1;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="UpgradeSolution">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    const ACTION = "Upgrade";
                                    var result = DataShapes["PTC.Base.ComponentConfigStatus"].CreateValues();
                                    if (!config) {
                                    	throw new Error("No configuration params supplied for upgrade. Run GetSolutionUpgradeConfigurationParameters service for list of parameters to supply");
                                    }
                                    try {
                                    	me.PreUpgradeSolution({
                                    		config: config
                                    	});
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw err;
                                    }
                                    try {
                                    	let componentDeployOrder = me.GetComponentDeploymentOrder();
                                    	componentDeployOrder.array.forEach(bbName => {
                                    		let entryPoint = Things[bbName + ".EntryPoint"];
                                    		let isValidUpgradeConfigParam = me.ValidateComponentUpgradeParams({
                                    			jsonParams: config,
                                    			componentEntryPoint: entryPoint.name
                                    		});
                                    		if (isValidUpgradeConfigParam) {
                                    			me.ProcessSolution({
                                    				action: ACTION,
                                    				config: config
                                    			});
                                    		}
                                    		let isValidMigrateConfigParam = me.ValidateComponentMigrateParams({
                                    			jsonParams: config,
                                    			componentEntryPoint: entryPoint.name
                                    		});
                                    
                                    		if (isValidMigrateConfigParam && config.automatedMigration) {
                                    			me.MigrateSolution({
                                    				config: config
                                    			});
                                    		}
                                    	});
                                    	result = summarizeResults();
                                    } catch (err) {
                                    	result = summarizeResults();
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    }
                                    
                                    function summarizeResults() {
                                    	let upgradeResult = me.GetSolutionUpgradeAndMigrateStatus({
                                    		config: config
                                    	});
                                    	return upgradeResult;
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="ValidateComponentDeployParams">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    const DEPLOY = "Deploy";
                                    try {
                                    	result = me.ValidateComponentParams({
                                    		jsonParams: jsonParams,
                                    		componentEntryPoint: componentEntryPoint,
                                    		action: DEPLOY
                                    	});
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw err;
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="ValidateComponentMigrateParams">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    const MIGRATE = "Migrate";
                                    try {
                                    	result = me.ValidateComponentParams({
                                    		jsonParams: jsonParams,
                                    		componentEntryPoint: componentEntryPoint,
                                    		action: MIGRATE
                                    	});
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw err;
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="ValidateComponentParams">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                        var result = true;
                                    	if(componentEntryPoint && Things[componentEntryPoint]) {
                                        	result = Things[componentEntryPoint]["ValidateComponent" + action + "ConfigParams"]({
                                                jsonParams: jsonParams
                                            });
                                        }
                                    } catch (err) {
                                        logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                        throw err;
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="ValidateComponentUpgradeParams">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    const UPGRADE = "Upgrade";
                                    try {
                                    	result = me.ValidateComponentParams({
                                    		jsonParams: jsonParams,
                                    		componentEntryPoint: componentEntryPoint,
                                    		action: UPGRADE
                                    	});
                                    } catch (err) {
                                    	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                    	throw err;
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
            </ServiceImplementations>
            <Subscriptions></Subscriptions>
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility>
                    <Principal
                     isPermitted="true"
                     name="PTC.Base.Default_OR:PTC.Base.BaseManagementPermission"
                     type="OrganizationalUnit"></Principal>
                    <Principal
                     isPermitted="true"
                     name="PTC.Base.Default_OR:PTC.Base.Default_UG"
                     type="OrganizationalUnit"></Principal>
                </Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <InstanceRunTimePermissions>
                <Permissions
                 resourceName="DeleteComponentUsers">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="PTC.Base.BaseManagementPermission"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="AddNewUserToUserGroup">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="PTC.Base.BaseManagementPermission"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="AddOrgUnitToOrg">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="PTC.Base.BaseManagementPermission"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="*">
                    <PropertyRead>
                        <Principal
                         isPermitted="true"
                         name="System"
                         type="User"></Principal>
                    </PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="System"
                         type="User"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="AddUserGroupToComponent">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="PTC.Base.BaseManagementPermission"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="DeleteComponent">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="PTC.Base.BaseManagementPermission"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="DeleteComponentUserGroup">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="PTC.Base.BaseManagementPermission"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="AddGroupToOrgUnit">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="PTC.Base.BaseManagementPermission"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="AddNewUserToComponent">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="PTC.Base.BaseManagementPermission"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="AddNewComponent">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="PTC.Base.BaseManagementPermission"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="DeleteOrgUnitFromOrganization">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="PTC.Base.BaseManagementPermission"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="AddGroupToGroup">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="PTC.Base.BaseManagementPermission"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
                <Permissions
                 resourceName="AddOrganizationToComponent">
                    <PropertyRead></PropertyRead>
                    <PropertyWrite></PropertyWrite>
                    <ServiceInvoke>
                        <Principal
                         isPermitted="true"
                         name="PTC.Base.BaseManagementPermission"
                         type="Group"></Principal>
                    </ServiceInvoke>
                    <EventInvoke></EventInvoke>
                    <EventSubscribe></EventSubscribe>
                </Permissions>
            </InstanceRunTimePermissions>
        </ThingShape>
    </ThingShapes>
</Entities>
